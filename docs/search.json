[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intermediate Data Science Notes",
    "section": "",
    "text": "Preface\nThis book contains course notes for STAT/COMP 212: Intermediate Data Science at Macalester College."
  },
  {
    "objectID": "keyboard.html#navigating-your-cursor-with-the-keyboard",
    "href": "keyboard.html#navigating-your-cursor-with-the-keyboard",
    "title": "1  Keyboard shortcuts and navigation",
    "section": "1.1 Navigating your cursor with the keyboard",
    "text": "1.1 Navigating your cursor with the keyboard\nInstead of pointing and clicking where you want your mouse to go, you can use keyboard shortcuts.\n\n1.1.1 Navigating around words and letters\n“Words” refer to a string of characters buffered before and after by a space (and sometimes other separating characters like a dash.)\n\n\n\n\n\n\n\n\nAction\nWindows \nMac \n\n\n\n\nMove cursor to the beginning/end of a word\nCtrl Left/Right\nOption Left/Right\n\n\nDelete previous word \nCtrl Backspace\nOption Delete\n\n\nDelete next word \nCtrl Delete\nOption Fn Delete\n\n\nHighlight previous/next word\nCtrl Shift Left/Right\nOption Shift Left/Right\n\n\nHighlight previous/next letter\nShift Left/Right\nShift Left/Right\n\n\n\nSometimes it is actually faster to use your mouse. (e.g., If you want to move your cursor to the middle of a line with many words, using a keyboard shortcut would require holding Ctrl/Option+Left or Right for a few seconds, which is probably slower than using your mouse.)\n\n\n1.1.2 Navigating around lines\n\n\n\n\n\n\n\n\nAction\nWindows \nMac \n\n\n\n\nMove cursor to the beginning/end of a line\nAlt Left/Right\nCommand Left/Right\n\n\nDelete from cursor to beginning of line\nAlt Backspace\nCommand Delete\n\n\nDelete from cursor to end of line\nAlt Delete\nCommand Fn Delete\n\n\nSelect from cursor to beginning/end of line\nAlt Shift Left/Right\nCommand Shift Left/Right\n\n\nSelect from cursor to same position on previous/next line\nShift Up/Down\nShift Up/Down\n\n\n\n\n\n1.1.3 General themes\n\nCtrl (Windows) and Option (Mac) allow word navigation\nAlt (Windows) and Command (Mac) allow line navigation\n\nCombine the above ideas with:\n\nShift: to highlight words (useful for copying and pasting)\nBackspace and Delete: to delete"
  },
  {
    "objectID": "keyboard.html#rstudio-keyboard-shortcuts",
    "href": "keyboard.html#rstudio-keyboard-shortcuts",
    "title": "1  Keyboard shortcuts and navigation",
    "section": "1.2 RStudio keyboard shortcuts",
    "text": "1.2 RStudio keyboard shortcuts\nTo view all of RStudio’s keyboard shortcuts, navigate to:\n\nHelp &gt; Keyboard Shortcuts Help\n\nYou can also customize these shortcuts:\n\nTools &gt; Modify Keyboard Shortcuts…\n\nBelow are (IMO) the most useful RStudio keyboard shortcuts.\n\n1.2.1 Tab completion\nType part of a function or object name (in the Editor or Console) and then hit Tab. A menu of autocomplete options will popup. Select your choice with arrow keys and hit Tab or Enter. (e.g., Type ggp and hit Tab.) Tab completion also works for function arguments.\n\n\n1.2.2 Working in source files\n\n\n\n\n\n\n\n\nAction\nWindows \nMac \n\n\n\n\nInsert code chunk\nCtrl Alt I\nOption Command I\n\n\nInsert pipe operator (%&gt;%)\nCtrl Shift M\nCommand Shift M\n\n\nInsert assignment operator (&lt;-)\nAlt -\nOption -\n\n\nRun current code chunk\nCtrl Shift Enter\nCommand Shift Return\n\n\nRun current line/currently selected lines\nCtrl Enter\nCommand Return\n\n\n(Un)comment current line/currently selected lines\nCtrl Shift C\nCommand Shift C\n\n\n\nNotes:\n\nOn my Mac, I like to change the “Insert assignment operator” shortcut to Command , (This overrides the shortcut for pulling up RStudio’s options, but I don’t look at those options often anyway.)\nWhen running a single line of code, your cursor can be anywhere on the line–it doesn’t need to be all the way at the beginning or end.\nWhen running code that is selected across multiple lines, exactly what is selected is run. If you want to run part of a line, select just that part. If you want to run multiple whole lines, select all those lines in their entirety.\nWhen commenting/uncommenting lines, you don’t need to have the whole line fully selected. Having just part of a line selected suffices.\n\n\n\n1.2.3 Working in the Console\nWhile you may be used to writing all of your code in code chunks within a document, it is often useful to run code interactively in the Console as “scratch work.” You’ll often find that when testing out code, trying it out in the Console keeps your code document clean.\n\n\n\n\n\n\n\n\nAction\nWindows \nMac \n\n\n\n\nMove cursor to the Console\nCtrl 2\nCtrl 2\n\n\nCycle through previous commands\nUp/Down\nUp/Down\n\n\nShow pop up of command history\nCtrl Up\nCommand Up\n\n\nInterrupt currently executing command\nEsc\nEsc\n\n\n\nYou can pull up the documentation (help page) for a function by entering ?function_name in the Console."
  },
  {
    "objectID": "files_directories_paths.html#change-the-default-file-download-location-for-your-internet-browser",
    "href": "files_directories_paths.html#change-the-default-file-download-location-for-your-internet-browser",
    "title": "2  File organization, directory structure, and navigation",
    "section": "2.1 Change the default file download location for your internet browser",
    "text": "2.1 Change the default file download location for your internet browser\n\nGenerally by default, internet browsers automatically save all files to the Downloads folder on your computer. This does not encourage good file organization practices. You need to change this option so that your browser asks you where to save each file before downloading it.\nThis page has information on how to do this for the most common browsers."
  },
  {
    "objectID": "files_directories_paths.html#folderdirectory-structure",
    "href": "files_directories_paths.html#folderdirectory-structure",
    "title": "2  File organization, directory structure, and navigation",
    "section": "2.2 Folder/directory structure",
    "text": "2.2 Folder/directory structure\nAnother word for a computer folder is a directory.\nWhen working on any data science project, I recommend setting up the directory structure below. Sub-bullets indicate folders that are inside other folders.\n\nDocuments (This should be some place you can find easily through your Finder (Mac) or File Explorer (Windows).)\n\ndescriptive_project_name\n\ncode\n\nraw: For messy code that you’re actively working on\nclean: For code that you have cleaned up, documented, organized, and tested to run as expected\n\ndata\n\nraw: Original data that hasn’t been cleaned\nclean: Any non-original data that has been processed in some way\n\nresults\n\nfigures: Plots that will be used in communicating your project should go here. (Using screenshots of output in RStudio is not a good practice.)\ntables: Any sort of plain text file results (e.g., CSVs)\n\n\n\n\nFrom this point onward, we will use a simplified version of this directory structure for all of our class activities."
  },
  {
    "objectID": "files_directories_paths.html#file-paths",
    "href": "files_directories_paths.html#file-paths",
    "title": "2  File organization, directory structure, and navigation",
    "section": "2.3 File paths",
    "text": "2.3 File paths\nIn a code file, when you read in data from a source on your computer, you need to specify the file path correctly. The file path is a text string that tells you how to get from your code file to the data. There are two types of paths: absolute and relative.\nAbsolute file paths start at the “root” directory in a computer system. Examples:\n\nMac: /Users/lesliemyint/Desktop/teaching/STAT212/2023_fall/class_activities/advanced_maps/us_states_hexgrid.geojson\n\nOn a Mac the tilde ~ in a file path refers to the “Home” directory, which is /Users/lesliemyint. In this case, the path becomes ~/Desktop/teaching/STAT212/2023_fall/class_activities/advanced_maps/us_states_hexgrid.geojson\n\nWindows: C:/Users/lesliemyint/Documents/teaching/STAT212/2023_fall/class_activities/advanced_maps/us_states_hexgrid.geojson\n\nNote: Windows uses both / (forward slash) and \\ (backward slash) to separate folders in a file path.\n\n\n\nRelative file paths start wherever you are right now (the working directory (WD)). The WD when you’re working in a code file may be different from the working directory in the Console.\nDirectory setup 1: Data is in same folder as code file\n\nsome_folder\n\nyour_code_file.qmd\ndata.csv\n\n\nThere are two options for the relative path:\n\n./data.csv (The ./ refers to the current working directory.)\ndata.csv\n\nDirectory setup 2: Data is within a subfolder called data\n\nsome_folder\n\nyour_code_file.qmd\ndata\n\ndata.csv\n\n\n\nThe relative path would be data/data.csv. (Note: ./data/data.csv would also work.)\nDirectory setup 3: Need to go to a “parent” folder first to get to the data\n\nsome_folder\n\ndata.csv\ncode\n\nyour_code_file.qmd\n\n\n\nTo go “up” a folder in a relative path we use ../.\nThe relative path here would be ../data.csv."
  }
]